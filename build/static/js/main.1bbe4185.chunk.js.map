{"version":3,"sources":["components/InfoBox.js","components/LineGraph.js","components/Utils.js","components/Map.js","components/Table.js","App.js","reportWebVitals.js","Reducer.js","stateProvider.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","useEffect","getData","useState","setData","buildChartData","lastDataPoint","chartData","x","forEach","console","log","newDataPoint","y","push","a","fetch","resp","json","finalResponse","result","length","datasets","backgroundColor","borderColor","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","Map","countries","center","zoom","mapCenter","setMapCenter","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","Table","countryTable","sort","b","c","App","pretyStats","stats","setCountries","setCountry","setCountryInfo","setCountryTable","lng","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesTypes","worlwideInfo","getCountries","cur","name","iso2","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","disabled","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","state","action","payload","user","StateContext","createContext","StateProvider","initialState","children","Provider","useReducer","ReactDOM","render","basket","document","getElementById"],"mappings":"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","file":"static/js/main.1bbe4185.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./../styles/InfoBox.css\";\n// import { useStateValue } from \"./../stateProvider\";\n\nconst InfoBox = ({ title, cases, active, isRed, total, ...props }) => {\n  //   const [{ user }] = useStateValue();\n\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default InfoBox;\n","import React, { useEffect, useState } from \"react\";\nimport \"./../styles/LineGraph.css\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst LineGraph = ({ casesType }) => {\n  useEffect(() => {\n    getData();\n  }, [casesType]);\n\n  const [data, setData] = useState({});\n  const buildChartData = (data, casesType) => {\n    const chartData = [];\n    let lastDataPoint;\n    setData(data[\"cases\"].forEach);\n    console.log(data);\n    for (let x in data[casesType]) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: x,\n          y: data[casesType][x] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][x];\n    }\n    return chartData;\n  };\n  const getData = async () => {\n    const resp = await fetch(\n      `https://disease.sh/v3/covid-19/historical/all?lastdays=120`\n    );\n    const finalResponse = await resp.json();\n    const result = buildChartData(finalResponse, casesType);\n    setData(result);\n    // console.log(result);\n  };\n  return (\n    <div className=\"linegraph\">\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                label: \"# of Cases\",\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;\n","export const casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n","import React from \"react\";\nimport \"./../styles/Map.css\";\n// import \"numeral\" from \"numeral\";\nimport { casesTypeColors } from \"./Utils\";\nimport numeral from \"numeral\";\nimport { Map as LeafLetMap, Circle, Popup, TileLayer } from \"react-leaflet\";\n\n// import { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nfunction Map({ countries, casesType, center, zoom, mapCenter, setMapCenter }) {\n  console.log(center);\n  // Draw circle on the map wtih interactive tooltip\n  const showDataOnMap = (data) =>\n    data.map((country) => (\n      <Circle\n        center={[country?.countryInfo?.lat, country?.countryInfo?.long]}\n        fillOpacity={0.4}\n        color={casesTypeColors[casesType].hex}\n        fillColor={casesTypeColors[casesType].hex}\n        radius={\n          Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n        }\n      >\n        <Popup>\n          <div className=\"info-container\">\n            <div\n              className=\"info-flag\"\n              style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n            ></div>\n            <div className=\"info-name\">{country.country}</div>\n            <div className=\"info-confirmed\">\n              Cases: {numeral(country.cases).format(\"0,0\")}\n            </div>\n            <div className=\"info-recovered\">\n              Recovered: {numeral(country.recovered).format(\"0,0\")}\n            </div>\n            <div className=\"info-deaths\">\n              Deaths: {numeral(country.deaths).format(\"0,0\")}\n            </div>\n          </div>\n        </Popup>\n      </Circle>\n    ));\n  return (\n    <div className=\"map\">\n      <LeafLetMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafLetMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./../styles/Table.css\";\nimport numeral from \"numeral\";\n\nconst Table = ({ countryTable }) => {\n  console.log(countryTable);\n  const result = countryTable.sort((a, b) => b.cases - a.cases);\n\n  return (\n    <div className=\"table\">\n      {result.map((c) => (\n        <tr>\n          <td> {c.country} </td>\n          <td>\n            <strong>{numeral(c.cases).format()}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","import {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./components/InfoBox\";\nimport LineGraph from \"./components/LineGraph\";\nimport Map from \"./components/Map\";\nimport Table from \"./components/Table\";\nimport numeral from \"numeral\";\n\nimport \"leaflet/dist/leaflet.css\";\nfunction App() {\n  const pretyStats = (stats) =>\n    stats ? `+${numeral(stats).format(\"0.0a\")}` : \"+0\";\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countryTable, setCountryTable] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.476 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesTypes] = useState(\"cases\");\n  const worlwideInfo = async () => {\n    let result = await fetch(`https://disease.sh/v3/covid-19/all`);\n    result = await result.json();\n    setCountryInfo(result);\n  };\n  useEffect(() => {\n    worlwideInfo();\n  }, []);\n\n  const getCountries = async () => {\n    try {\n      let result = await fetch(`https://disease.sh/v3/covid-19/countries`);\n      const data = await result.json();\n      result = data.map((cur) => ({\n        name: cur.country,\n        value: cur?.countryInfo?.iso2,\n      }));\n      setCountries(result);\n      setCountryTable(data);\n      setMapCountries(data);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    getCountries();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    setCountry(countryCode);\n    const url =\n      countryCode === \"worldwide\"\n        ? `https://disease.sh/v3/covid-19/all`\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    let result = await fetch(url);\n    result = await result.json();\n    setCountryInfo(result);\n    setMapCenter([result?.countryInfo?.lat, result?.countryInfo?.long]);\n    setMapZoom(3);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\" disabled>\n                worldwide\n              </MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesTypes(\"cases\")}\n            title=\"Coronavirus cases\"\n            cases={pretyStats(countryInfo?.todayCases)}\n            total={pretyStats(countryInfo?.cases)}\n          />\n\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesTypes(\"recovered\")}\n            title=\"Recovered\"\n            cases={pretyStats(countryInfo?.todayRecovered)}\n            total={pretyStats(countryInfo?.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesTypes(\"deaths\")}\n            title=\"Death\"\n            cases={pretyStats(countryInfo?.todayDeaths)}\n            total={pretyStats(countryInfo?.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n          setMapCenter={setMapCenter}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by countries</h3>\n          <Table countryTable={countryTable}></Table>\n          <h3>World new {casesType ?? \"\"}</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const initialState = {\n  basket: [],\n  user: null,\n};\n\nexport const reducer = (state, action) => {\n  console.log(action.payload);\n  switch (action.type) {\n    case \"ADD_USER\":\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createContext, useContext, useReducer } from \"react\";\n// ----------------------Setup Data layer-----------------------------------\n// -------------------------------------------------------------------------\n// We need this to track the Accounts\n// This is the data layer\nexport const StateContext = createContext();\n\n// Build the Provdeir\nexport const StateProvider = ({ reducer, initialState, children }) => {\n  return (\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n// This is how we used inside a component\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport reducer, { initialState } from \"./Reducer\";\nimport { StateProvider } from \"./stateProvider\";\nReactDOM.render(\n  <StateProvider initialState={initialState} reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}